<%- include("../include/head") %>
	<link rel="stylesheet" href="/frontEnd/assets/css/style.css">
	<link rel="stylesheet" href="/frontEnd/assets/plugins/select2/css/select2.min.css" />

	<!-- Bootstrap CSS -->
	<link rel="stylesheet" href="/frontEnd/assets/plugins/bootstrap-tagsinput/css/bootstrap-tagsinput.css" />

	<link rel="stylesheet" href="/frontEnd/assets/plugins/dropzone/dropzone.min.css" />
	<link href="/backEnd/assets/Tagging-System-Autocomplete-Amsify-Suggestags/css/amsify.suggestags.css"
		rel="stylesheet">
	<link href="/backEnd/assets/css/exam/addTest.css" rel="stylesheet">
	<!-- Main CSS -->

	<%- include("../include/aside") %>
		<%- include("../include/navePare") %>
			<%- include("../include/alert") %>
				</head>
				</body>

				<div class="main-wrapper">
					<!-- Page Wrapper -->
					<div class="page-wrapper">
						<div class="content container-fluid">
							<!-- Page Header -->
							<div class="page-header">
								<div class="row">
									<div class="col-sm-7 col-auto">
										<h3 class="page-title">Exams</h3>
										<ul class="breadcrumb">
											<li class="breadcrumb-item"><a href="/">Control Panel</a></li>
											<li class="breadcrumb-item active">Add Exam</li>
										</ul>
									</div>
								</div>
								<%- include("../include/notification") %>
							</div>
							<!-- /Page Header -->


							<div class="row">
								<div class="col-md-12">
									<form method="post" enctype="application/x-www-form-urlencoded" id="examForm">
										<!-- Tabs Section -->
										<ul class="nav nav-tabs">
											<li class="nav-item">
												<a class="nav-link active" data-toggle="tab" href="#exam-info-tab">Exam
													Data</a>
											</li>
											<li class="nav-item">
												<a class="nav-link" data-toggle="tab"
													href="#questions-tab">Questions</a>
											</li>
										</ul>

										<div class="tab-content">
											<!-- Exam Info Tab -->
											<div id="exam-info-tab" class="tab-pane active">
												<div class="card mt-3">
													<div class="card mt-3">
														<div class="card-body">
															<h4 class="card-title">Basic information</h4>
															<div class="row form-row">
																<div class="col-md-12">
																	<div class="form-group">
																		<label>Exam Name<span
																				class="text-danger">*</span></label>
																		<input type="text" name="examName" id="examName"
																			class="form-control" required>
																		<div class="error-message text-danger"></div>
																	</div>
																</div>

																<div class="col-md-12">
																	<div class="form-group">
																		<label>Exam Type <span
																				class="text-danger">*</span></label>
																		<select class="form-control" name="examType"
																			id="examType" required>
																			<option value="academic">Academic</option>
																			<option value="general training">General
																				Training</option>
																		</select>
																		<div class="error-message text-danger"></div>
																	</div>
																</div>

																<!-- Toggle Shuffle Button -->
																<div class="col-md-12">
																	<div class="form-group">
																		<label>Random Order</label>
																		<div>
																			<button type="button" id="shuffleToggle"
																				class="btn btn-primary">
																				<span id="shuffleLabel">Activated</span>
																			</button>
																			<input type="hidden" name="shuffle"
																				id="shuffleInput" value="true">
																		</div>
																	</div>
																</div>
															</div>
														</div>
													</div>
												</div>

											</div>
											<!-- /Exam Info Tab -->

											<!-- Questions Tab -->
											<div id="questions-tab" class="tab-pane">
												<ul class="nav nav-tabs" id="sections-tabs">
													<!-- Dynamic Section Tabs Will Be Appended Here -->
												</ul>

												<div class="tab-content" id="sections-content">
													<!-- Dynamic Section Content Will Be Appended Here -->
												</div>
											</div>
										</div>

										<div class="submit-section submit-btn-bottom">
											<button type="button" id="submitExam"
												class="btn btn-primary submit-btn">save
												Changes</button>
										</div>
									</form>
								</div>
							</div>

						</div>
					</div>
					<!-- /Page Wrapper -->
				</div>
				<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
				<script src="https://cdn.ckeditor.com/ckeditor5/39.0.1/classic/ckeditor.js"></script>
				<script>
					document.addEventListener("DOMContentLoaded", () => {
						const shuffleToggle = document.getElementById("shuffleToggle");
						const shuffleLabel = document.getElementById("shuffleLabel");
						const shuffleInput = document.getElementById("shuffleInput");

						// Initial state
						let isShuffleEnabled = true;

						shuffleToggle.addEventListener("click", () => {
							isShuffleEnabled = !isShuffleEnabled;
							shuffleInput.value = isShuffleEnabled ? "true" : "false";
							shuffleLabel.textContent = !isShuffleEnabled ? "Disabled" : "Activated";
							shuffleToggle.classList.toggle("btn-primary", isShuffleEnabled);
							shuffleToggle.classList.toggle("btn-danger", !isShuffleEnabled);
						});
					});
				</script>

				<script>

					const sections = JSON.parse('<%- JSON.stringify(sections) %>');
					const sectionsTabs = document.getElementById('sections-tabs');
					const sectionsContent = document.getElementById('sections-content');
					const editors = {};
					const audioFiles = {};
					const fileUploads = {};
					let questionCounts = {};
					let blockCounts = {};


					function showNotification({ type, title, text = '', html = '', timer = 5000, position = 'top-end' }) {
						Swal.fire({
							toast: true,
							position,
							icon: type,
							title,
							text,
							html,
							showConfirmButton: false,
							timer,
						});
					}


					// Generate Tabs and Content for Each Section

					// document.addEventListener('click', (event) => {
					// 	if (event.target.classList.contains('add-question-btn')) {
					// 		const sectionId = event.target.getAttribute('data-section-id');
					// 		addQuestion(sectionId);
					// 	}
					// });

					const addBlock = (sectionId) => {
						blockCounts[sectionId]++;
						const blockIndex = blockCounts[sectionId];
						questionCounts[sectionId][blockIndex] = 0;

						const blocksContainer = document.getElementById(`blocks-container-${sectionId}`);
						const addBlockButton = blocksContainer.previousElementSibling; // تحديد زر "Add Question Block"

						const blockTemplate = `
					           <div class="block card mt-3">
									<div class="card-header bg-primary text-white">
										<h5>Block ${blockIndex}</h5>
									</div>
									<div class="card-body">
										<div class="form-group">
											<label>Description</label>
											<textarea name="sections[${sectionId}][blocks][${blockIndex}][description]" id="block-description-${sectionId}-${blockIndex}" class="form-control"></textarea>
										</div>
										<div id="questions-container-${sectionId}-${blockIndex}" class="questions-container mt-3">
											<!-- Questions for this block will be added here -->
										</div>
										<button type="button" class="btn btn-primary add-question-btn mt-2" data-section-id="${sectionId}" data-block-index="${blockIndex}">Add Question</button>
									</div>
								</div>
					        `;
						blocksContainer.insertAdjacentHTML('beforeend', blockTemplate);

						// Initialize CKEditor for description
						ClassicEditor.create(document.querySelector(`#block-description-${sectionId}-${blockIndex}`))
							.then(editor => {
								editors[`block-description-${sectionId}-${blockIndex}`] = editor;
							})
							.catch(error => {
								console.error(error);
							});
					};


					// Generate Tabs and Content for Each Section
					sections.forEach((section, index) => {
						const tab = document.createElement('li');
						tab.className = 'nav-item';
						tab.innerHTML = `<a class="nav-link ${index === 0 ? 'active' : ''}" data-toggle="tab" href="#section-${section._id}">${section.section}</a>`;
						sectionsTabs.appendChild(tab);

						const content = document.createElement('div');
						content.className = `tab-pane ${index === 0 ? 'active' : ''}`;
						content.id = `section-${section._id}`;
						content.innerHTML = `
					            <div>
					                <div id="blocks-container-${section._id}" class="blocks-container mt-4">
					                    <!-- Blocks will be dynamically added here -->
					                </div>
									 <button type="button" class="btn btn-success add-block-btn"  data-section-id="${section._id}">Add Question Block</button>
					            </div>
					        `;
						sectionsContent.appendChild(content);

						blockCounts[section._id] = 0;
						questionCounts[section._id] = {};
					});

					// Event listener for adding blocks
					document.addEventListener('click', (event) => {
						if (event.target.classList.contains('add-block-btn')) {
							const sectionId = event.target.getAttribute('data-section-id');
							addBlock(sectionId);
						} else if (event.target.classList.contains('add-question-btn')) {
							const sectionId = event.target.getAttribute('data-section-id');
							const blockId = event.target.getAttribute('data-block-index');

							addQuestion(sectionId, blockId);
						}
					});

					// Function to add a block

					// Function to add a question
					const addQuestion = (sectionId, blockId) => {
						const blockIndex2 = blockId;
						questionCounts[sectionId][blockIndex2]++;
						const questionIndex = questionCounts[sectionId][blockIndex2];
						const questionsContainer = document.getElementById(`questions-container-${sectionId}-${blockIndex2}`);
						const questionTemplate = `
					            <div class="question card mt-3">
									<div class="card-body">
										<h6 class="question-title question_text">Question ${questionIndex}</h6>
										<div class="form-group">
											<label>Question Text</label>
											<textarea name="sections[${sectionId}][blocks][${blockIndex2}][questions][${questionIndex}][text]" id="question-text-${sectionId}-${blockIndex2}-${questionIndex}" class="form-control"></textarea>
										</div>
										<div class="form-group">
											<label>Question Degree</label>
											<input type="number" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${questionIndex}][degree]" class="form-control" />
										</div>
										<div class="form-group">
											<label>Question Type</label>
											<select name="sections[${sectionId}][blocks][${blockIndex2}][questions][${questionIndex}][type]" class="form-control question-type" data-index="${questionIndex}" data-section-id="${sectionId}">
												<option value=""></option>
												<option value="multipleChoice">Multiple Choice</option>
												<option value="trueFalse">True or False</option>
												<option value="fillInTheBlank">Fill in the Blank</option>
												<option value="audio">Audio</option>
												<option value="file">File</option>
											</select>
										</div>
										<div class="additional-fields" data-section-id="${sectionId}" data-block-index="${blockIndex2}" data-index="${questionIndex}"></div>
										<button type="button" class="btn btn-danger remove-question-btn">Delete Question</button>
									</div>
								</div>

					        `;

						questionsContainer.insertAdjacentHTML('beforeend', questionTemplate);

						// Initialize CKEditor for question text
						ClassicEditor.create(document.querySelector(`#question-text-${sectionId}-${blockIndex2}-${questionIndex}`))
							.then(editor => {
								editors[`question-text-${sectionId}-${blockIndex2}-${questionIndex}`] = editor;
							})
							.catch(error => {
								console.error(error);
							});

						attachEventListeners(blockIndex2);
					};

					const attachEventListeners = (blockIndex2) => {
						document.querySelectorAll('.remove-question-btn').forEach((btn) => {
							btn.addEventListener('click', (e) => {
								e.target.closest('.question').remove();
							});
						});
						console.log(blockIndex2)
						document.querySelectorAll('.question-type').forEach((select) => {
							select.addEventListener('change', (e) => {
								const type = e.target.value;
								const sectionId = e.target.dataset.sectionId;
								const index = e.target.dataset.index;
								const additionalFields = document.querySelector(`.additional-fields[data-section-id="${sectionId}"][data-block-index="${blockIndex2}"][data-index="${index}"]`);
								if (!additionalFields) return
								additionalFields.innerHTML = '';
								if (type === 'multipleChoice') {
									additionalFields.innerHTML = `
										<div class="form-group">
											<label>Options <span class="text-danger">*</span></label>
											<div id="choices-container-${sectionId}-${blockIndex2}-${index}">
												<div class="choice-wrapper d-flex align-items-center mb-2">
													<span class="choice-number mr-2">1.</span>
													<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][choices][]" class="form-control" placeholder="First Option" required>
												</div>
												<div class="choice-wrapper d-flex align-items-center mb-2">
													<span class="choice-number mr-2">2.</span>
													<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][choices][]" class="form-control" placeholder="Second Option" required>
												</div>
											</div>
											<button type="button" class="btn btn-success btn-sm add-choice-btn" data-section-id="${sectionId}" data-block-index="${blockIndex2}" data-index="${index}">Add Option</button>
										</div>
										<div class="form-group">
											<label>The Right Answer <span class="text-danger">*</span></label>
											<select name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required></select>
										</div>
									`;
									console.log(sectionId, blockIndex2, index)
									attachChoiceEvent(sectionId, blockIndex2, index);
								} else if (type === 'trueFalse') {
									additionalFields.innerHTML = `
										<div class="form-group">
											<label>The Right Answer<span class="text-danger">*</span></label>
											<select name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
												<option value="true">Yes</option>
												<option value="false">No</option>
											</select>
										</div>
									`;
								} else if (type === 'fillInTheBlank') {
									additionalFields.innerHTML = `
										<div class="form-group">
											<label>Answer <span class="text-danger">*</span></label>
											<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
										</div>
									`;
								} else if (type === 'audio') {
									additionalFields.innerHTML = `
										<div class="form-group">
											<label>Audio Recording <span class="text-danger">*</span></label>
											<div class="audio-controls">
												<button type="button" class="btn btn-primary record-audio-btn" data-section-id="${sectionId}" data-block-index="${blockIndex2}" data-index="${index}">
													<i class="fa fa-microphone"></i> Record
												</button>
												<span class="recording-indicator text-danger d-none">Recording...</span>
												<audio controls class="mt-2 d-none"></audio>
											</div>
										</div>
										<div class="form-group">
											<label>The Right Answer <span class="text-danger">*</span></label>
											<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
										</div>
									`;
									attachAudioListeners(sectionId, blockIndex2, index);
								} else if (type === 'file') {
									additionalFields.innerHTML = `
										<div class="form-group">
											<label>Upload File <span class="text-danger">*</span></label>
											<input type="file" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][file]" class="form-control file-upload" data-section-id="${sectionId}" data-block-index="${blockIndex2}" data-index="${index}" required>
										</div>
										<div class="form-group">
											<label>The Right Answer <span class="text-danger">*</span></label>
											<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
										</div>
									`;
									attachFileListeners(sectionId, blockIndex2, index);
								}

							});
						});
					};

					const attachChoiceEvent = (sectionId, blockIndex2, index) => {

						const addChoiceBtn = document.querySelector(`.add-choice-btn[data-section-id="${sectionId}"][data-block-index="${blockIndex2}"]`);
						const correctAnswerSelect = document.querySelector(`select[name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]"]`);
						const updateCorrectAnswerOptions = () => {
							const choicesContainer = document.getElementById(`choices-container-${sectionId}-${blockIndex2}-${index}`);
							const choices = choicesContainer.querySelectorAll('input[type="text"]');
							correctAnswerSelect.innerHTML = ''; // Clear old options

							choices.forEach((choice, i) => {
								const option = document.createElement('option');
								option.value = choice.value;
								option.textContent = `${i + 1}. ${choice.value}`;
								correctAnswerSelect.appendChild(option);
							});
						};
						addChoiceBtn.addEventListener('click', () => {
							const choicesContainer = document.getElementById(`choices-container-${sectionId}-${blockIndex2}-${index}`);
							const choiceTemplate = `
						<div class="choice-wrapper d-flex align-items-center mb-2">
							<span class="choice-number mr-2">${choicesContainer.children.length + 1}.</span>
							<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][choices][]" class="form-control" placeholder="Additional Option" required>
							<button type="button" class="btn btn-danger btn-sm ml-2 remove-choice-btn">X</button>
						</div>
					`;
							choicesContainer.insertAdjacentHTML('beforeend', choiceTemplate);
							updateCorrectAnswerOptions();
						});

						const choicesContainer = document.getElementById(`choices-container-${sectionId}-${blockIndex2}-${index}`);
						choicesContainer.addEventListener('input', (e) => {
							if (e.target.tagName === 'INPUT') {
								updateCorrectAnswerOptions();
							}
						});

						choicesContainer.addEventListener('click', (e) => {
							if (e.target.classList.contains('remove-choice-btn')) {
								const choiceWrapper = e.target.closest('.choice-wrapper');
								choiceWrapper.remove();

								// Update choice numbers
								const allChoices = choicesContainer.querySelectorAll('.choice-wrapper');
								allChoices.forEach((choice, i) => {
									choice.querySelector('.choice-number').textContent = `${i + 1}.`;
								});

								updateCorrectAnswerOptions();
							}
						});

						updateCorrectAnswerOptions();
					};

					const attachAudioListeners = (sectionId, blockIndex2, index) => {
						console.log(sectionId, blockIndex2, index)
						const recordBtn = document.querySelector(`.record-audio-btn[data-section-id="${sectionId}"][data-block-index="${blockIndex2}"][data-index="${index}"]`);
						const parent = recordBtn.closest('.audio-controls');
						const audioElement = parent.querySelector('audio');
						const recordingIndicator = parent.querySelector('.recording-indicator');
						let mediaRecorder;
						let isRecording = false;
						let chunks = [];

						recordBtn.addEventListener('click', async () => {
							if (!isRecording) {
								const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
								mediaRecorder = new MediaRecorder(stream);

								mediaRecorder.ondataavailable = (e) => {
									chunks.push(e.data);
								};

								mediaRecorder.onstop = async () => {
									const blob = new Blob(chunks, { type: 'audio/ogg; codecs=opus' });
									audioElement.src = URL.createObjectURL(blob);
									audioElement.classList.remove('d-none');
									chunks = [];

									const formData = new FormData();
									formData.append('file', blob);

									try {
										const response = await fetch('http://localhost:5000/dashboard/upload-test-file', {
											method: 'POST',
											body: formData
										});

										if (!response.ok) {
											throw new Error('Failed to upload file');
										}

										const data = await response.json();
										audioFiles[`sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][file]`] = data.fileName;
										recordingIndicator.classList.add('d-none');
										recordBtn.innerHTML = '<i class="fa fa-microphone"></i> تسجيل';
									} catch (error) {
										console.error('Upload failed:', error);
										// alert('حدث خطأ أثناء رفع الملف. حاول مرة أخرى.');
									}

									recordingIndicator.classList.add('d-none');
									recordBtn.innerHTML = '<i class="fa fa-microphone"></i> تسجيل';
								};

								mediaRecorder.start();
								isRecording = true;
								recordingIndicator.classList.remove('d-none');
								recordBtn.innerHTML = '<i class="fa fa-stop"></i> إيقاف';
							} else {
								mediaRecorder.stop();
								isRecording = false;
							}
						})
					};

					const attachFileListeners = (sectionId, blockIndex2, index) => {
						const fileInput = document.querySelector(`.file-upload[data-section-id="${sectionId}"][data-index="${index}"]`);

						fileInput.addEventListener('change', async (event) => {
							const file = event.target.files[0];
							const allowedTypes = ['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp3'];

							// التحقق من نوع وحجم الملف
							if (file && file.size <= 4 * 1024 * 1024 && allowedTypes.includes(file.type)) {
								const formData = new FormData();
								formData.append('file', file);

								try {
									const response = await fetch('http://localhost:5000/dashboard/upload-test-file', {
										method: 'POST',
										body: formData
									});

									if (!response.ok) {
										throw new Error('Failed to upload file');
									}

									const data = await response.json();
									fileUploads[`sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][file]`] = data.fileName;



									alert('تم رفع الملف بنجاح!');
								} catch (error) {
									console.error('Upload failed:', error);
									alert('An error occurred while uploading the file. Try again.');
								}
							} else {
								if (!allowedTypes.includes(file.type)) {
									alert('The specified file is not a valid audio file.');
								} else if (file.size > 4 * 1024 * 1024) {
									alert('The file exceeds the allowed size (4 MB).');
								}
							}
						});
					};

					const submitButton = document.getElementById('submitExam');
					submitButton.addEventListener('click', async () => {
						const form = document.getElementById('examForm');
						const formData = new FormData(form);

						// Transform FormData into a structured JSON object
						const payload = {};

						// Update question text using CKEditor
						Object.keys(editors).forEach(editorId => {
							const editorContent = editors[editorId].getData();
							const textarea = document.querySelector(`#${editorId}`);
							if (textarea) formData.set(textarea?.name, editorContent);
						});

						// Add audio files to FormData
						Object.keys(audioFiles).forEach(key => {
							formData.set(key, audioFiles[key]);
						});

						// Add file uploads to FormData
						Object.keys(fileUploads).forEach(key => {
							formData.set(key, fileUploads[key]);
						});

						// Convert FormData to JSON
						formData.forEach((value, key) => {
							if (key.startsWith("sections")) {
								const keys = key.split(/\[|\]/).filter(k => k); // تقسيم المفتاح
								let current = payload;

								keys.forEach((k, i) => {
									if (!current[k]) {
										current[k] = isNaN(keys[i + 1]) ? {} : [];
									}

									if (i === keys.length - 1) {
										// معالجة الحقول التي تحتوي على [] مثل choices[]
										if (k === "choices") {
											if (!Array.isArray(current[k])) {
												current[k] = [];
											}
											current[k].push(value);
										} else {
											current[k] = value;
										}
									}

									current = current[k];
								});
							} else if (key === "examName") {
								payload.examName = value; // إضافة اسم الامتحان
							} else if (key === "examType") {
								payload.examType = value; // إضافة نوع الامتحان
							} else if (key === "shuffle") {
								payload.shuffle = value === "true"; // إضافة خاصية التبديل العشوائي
							}
						});

						// Function to clean payload
						const cleanPayload = (obj) => {
							if (Array.isArray(obj)) {
								return obj.filter(item => item !== null && item !== undefined).map(cleanPayload);
							} else if (typeof obj === 'object' && obj !== null) {
								const newObj = {};
								Object.keys(obj).forEach(key => {
									const value = cleanPayload(obj[key]);
									if (value !== null && value !== undefined) {
										newObj[key] = value;
									}
								});
								return newObj;
							}
							return obj;
						};

						// Clean the payload
						const cleanedPayload = cleanPayload(payload);

						// Ensure choices is always an array
						const ensureChoicesArray = (data) => {
							if (Array.isArray(data)) {
								return data.map(item => ensureChoicesArray(item));
							} else if (typeof data === 'object' && data !== null) {
								Object.keys(data).forEach(key => {
									if (key === 'choices' && typeof data[key] !== 'object') {
										data[key] = Array.isArray(data[key]) ? data[key] : [];
									} else {
										data[key] = ensureChoicesArray(data[key]);
									}
								});
								return data;
							}
							return data;
						};

						const finalPayload = ensureChoicesArray(cleanedPayload);

						try {
							const response = await fetch('http://localhost:5000/dashboard/addTesting', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify(finalPayload),
							});

							if (!response.ok) {
								const errorData = await response.json();

								if (errorData.errors && errorData.errors.length > 0) {
									Swal.fire({
										title: 'Validation error',
										html: errorData.errors.map(err => `<p>${err}</p>`).join(''),
										icon: 'error',
										confirmButtonText: 'Good',
									});
								} else {
									Swal.fire({
										title: 'Unexpected error',
										text: 'An unexpected error occurred. Try again.',
										icon: 'error',
										confirmButtonText: 'Good',
									});
								}
							} else {
								Swal.fire({
									title: 'Saved successfully',
									text: 'The operation was successful!',
									icon: 'success',
									confirmButtonText: 'Good',
								}).then(() => window.location.reload());
							}
						} catch (error) {
							console.error('Network error:', error);
							Swal.fire({
								title: 'Network error',
								text: 'An error occurred while connecting to the server. Please make sure you are connected to the network.',
								icon: 'error',
								confirmButtonText: 'Good',
							});
						}
					});


					attachEventListeners();
				</script>
				<script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>
				<script>

					async function handleExcelUpload(event, sectionId) {
						const file = event.target.files[0];
						if (!file) {
							showNotification({ type: 'error', title: 'Error', text: 'No file selected!' });
							return;
						}

						const allowedExtensions = ['xls', 'xlsx'];
						const extension = file.name.split('.').pop().toLowerCase();

						if (!allowedExtensions.includes(extension)) {
							showNotification({ type: 'error', title: 'Invalid File', text: 'Please upload a valid Excel file.' });
							return;
						}

						const reader = new FileReader();
						reader.onload = async (e) => {
							const data = new Uint8Array(e.target.result);
							const workbook = XLSX.read(data, { type: 'array' });
							const sheetName = workbook.SheetNames[0];
							const sheet = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);

							// Validate the content
							if (!validateExcelData(sheet)) {
								showNotification({ type: 'error', title: 'Invalid Data', text: 'Ensure the Excel file content matches the schema.' });
								return;
							}

							// Loop through the questions and add them dynamically
							sheet.forEach((row) => {
								addQuestionToUI(sectionId, row);
							});

							showNotification({ type: 'success', title: 'Questions Added Successfully!' });
						};

						reader.readAsArrayBuffer(file);
					}

					// Helper function to add question data to the UI


					function addQuestionToUI(sectionId, questionData) {
						// Call the addQuestion function to create a new question block
						addQuestion(sectionId);

						// Get the latest question block
						const questionIndex = questionCounts[sectionId];
						const questionBlock = document.querySelector(`#questions-container-${sectionId} .question-block:last-child`);

						// إزالة حقل السؤال إذا كان موجودًا
						const existingQuestionTextContainer = questionBlock.querySelector('.question-text-container');
						if (existingQuestionTextContainer) {
							existingQuestionTextContainer.remove();
						}

						// إضافة حقل السؤال الجديد داخل card-body بعد question_text
						const cardBody = questionBlock.querySelector('.card-body');
						const questionTextLabel = cardBody.querySelector('.question_text');
						if (cardBody && questionTextLabel) {
							questionTextLabel.insertAdjacentHTML('afterend', `
								<div class="form-group question-text-container">
									<label>Question Text <span class="text-danger">*</span></label>
									<textarea name="questions[${sectionId}][${questionIndex}][questionText]" id="question-editor-${sectionId}-${questionIndex}" class="form-control question-text" required>${questionData.questionText || ''}</textarea>
								</div>
							`);

							// تهيئة CKEditor على الحقل الجديد
							ClassicEditor.create(document.querySelector(`#question-editor-${sectionId}-${questionIndex}`))
								.then(editor => {
									editors[`question-editor-${sectionId}-${questionIndex}`] = editor;
									editor.setData(questionData.questionText || ''); // تعيين النص الجديد
								})
								.catch(error => {
									console.error(error);
								});
						} else {
							console.error('Card body or question_text label not found for the question block.');
						}

						// تأكد من وجود حقل الدرجة وقم بإضافته
						const questionDegreeElement = questionBlock.querySelector('.question-degree');
						if (questionDegreeElement) {
							questionDegreeElement.value = questionData.degree || 1;
						} else {
							console.error(`Missing 'question-degree' field for question ${questionIndex}`);
						}

						// تأكد من وجود حقل نوع السؤال وقم بإضافته
						const questionTypeElement = questionBlock.querySelector('.question-type');
						if (questionTypeElement) {
							questionTypeElement.value = questionData.type || '';
						} else {
							console.error(`Missing 'question-type' field for question ${questionIndex}`);
						}

						// إنشاء الحقول الإضافية بناءً على نوع السؤال
						const additionalFieldsContainer = questionBlock.querySelector('.additional-fields');

						if (questionData.type === 'multipleChoice') {
							// إنشاء الحقول الخاصة بالاختيارات
							additionalFieldsContainer.innerHTML = `
								<div class="form-group">
									<label>Options <span class="text-danger">*</span></label>
									<div id="choices-container-${sectionId}-${questionIndex}">
										${questionData.choices?.map((choice, index) => `
											<div class="choice-wrapper d-flex align-items-center mb-2">
												<span class="choice-number mr-2">${index + 1}.</span>
												<input type="text" name="questions[${sectionId}][${questionIndex}][choices][]" class="form-control" value="${choice}" placeholder="Option ${index + 1}" required>
											</div>
										`).join('') || ''}
									</div>
									<button type="button" class="btn btn-success btn-sm add-choice-btn" data-section-id="${sectionId}" data-index="${questionIndex}">Add Option</button>
								</div>
								<div class="form-group">
									<label>The Right Answer <span class="text-danger">*</span></label>
									<select name="questions[${sectionId}][${questionIndex}][correctAnswer]" class="form-control" required>
										${questionData.choices?.map(choice => `
											<option value="${choice}" ${choice === questionData.correctAnswer ? 'selected' : ''}>${choice}</option>
										`).join('') || ''}
									</select>
								</div>
							`;

							// وظيفة إضافة اختيارات جديدة
							const choicesContainer = questionBlock.querySelector(`#choices-container-${sectionId}-${questionIndex}`);
							const correctAnswerSelect = questionBlock.querySelector(`select[name="questions[${sectionId}][${questionIndex}][correctAnswer]"]`);

							questionBlock.querySelector('.add-choice-btn').addEventListener('click', () => {
								const newIndex = choicesContainer.children.length + 1;

								// إضافة اختيار جديد
								choicesContainer.insertAdjacentHTML('beforeend', `
									<div class="choice-wrapper d-flex align-items-center mb-2">
										<span class="choice-number mr-2">${newIndex}.</span>
										<input type="text" name="questions[${sectionId}][${questionIndex}][choices][]" class="form-control" placeholder="Option ${newIndex}" required>
									</div>
								`);

								// إضافة الخيار الجديد إلى القائمة المنسدلة
								correctAnswerSelect.insertAdjacentHTML('beforeend', `
									<option value="">Option ${newIndex}</option>
								`);
							});
						} else if (questionData.type === 'fillInTheBlank') {
							// إنشاء حقل نصي للإجابة الصحيحة
							additionalFieldsContainer.innerHTML = `
								<div class="form-group">
									<label>The Correct Answer <span class="text-danger">*</span></label>
									<input type="text" name="questions[${sectionId}][${questionIndex}][correctAnswer]" class="form-control" value="${questionData.correctAnswer || ''}" required>
								</div>
							`;
						} else if (questionData.type === 'trueFalse') {
							// إنشاء قائمة منسدلة لـ true/false
							additionalFieldsContainer.innerHTML = `
							<div class="form-group">
								<label>The Correct Answer <span class="text-danger">*</span></label>
								<select name="questions[${sectionId}][${questionIndex}][correctAnswer]" class="form-control" required>
									<option value="true" ${questionData.correctAnswer === 'true' ? 'selected' : ''}>True</option>
									<option value="false" ${questionData.correctAnswer === 'false' ? 'selected' : ''}>False</option>
								</select>
							</div>
						`;
						}
					}

					function validateExcelData(data) {
						// التحقق من كل صف في البيانات
						for (const row of data) {
							// التحقق من وجود النصوص المطلوبة
							if (!row.questionText || !row.type || row.degree == null) {
								console.error("Missing required fields in row:", row);
								return false;
							}

							// تنظيف النصوص لإزالة علامات الاقتباس المفردة والمزدوجة
							row.questionText = row.questionText.replace(/['"]+/g, '').trim();
							if (row.correctAnswer) {
								row.correctAnswer = row.correctAnswer.replace(/['"]+/g, '').trim();
							}

							// معالجة الحقل "choices" إذا كان موجودًا
							if (row.choices && typeof row.choices === 'string') {
								try {
									// تحويل النصوص إلى مصفوفة
									row.choices = JSON.parse(row.choices.replace(/'/g, '"'));
									// تنظيف الخيارات وإزالة القيم الفارغة
									row.choices = row.choices
										.map(choice => choice.replace(/['"]+/g, '').trim())
										.filter(choice => choice !== '');
								} catch (error) {
									console.error(`Invalid format for choices in row: ${row.questionText}`, error);
									return false;
								}
							}

							// التحقق بناءً على نوع السؤال
							if (row.type === 'multipleChoice') {
								// التحقق من وجود الخيارات والإجابة الصحيحة
								if (!row.choices || !Array.isArray(row.choices) || row.choices.length === 0) {
									console.error("Multiple choice question missing choices:", row);
									return false;
								}
								if (!row.correctAnswer || !row.choices.includes(row.correctAnswer)) {
									console.error("Correct answer is missing or invalid in multiple choice question:", row);
									return false;
								}
							} else if (row.type === 'fillInTheBlank') {
								// التحقق من وجود الإجابة الصحيحة
								if (!row.correctAnswer) {
									console.error("Correct answer is missing in fill-in-the-blank question:", row);
									return false;
								}
							} else if (row.type === 'trueFalse') {
								// التحقق من أن الإجابة الصحيحة هي إما "true" أو "false"
								if (row.correctAnswer !== 'true' && row.correctAnswer !== 'false') {
									console.error("Invalid correct answer for true/false question:", row);
									return false;
								}
							} else {
								// إذا كان النوع غير مدعوم
								console.error("Unsupported question type:", row.type);
								return false;
							}
						}
						// إذا كانت جميع الصفوف صحيحة
						return true;
					}

				</script>


				<%- include("../include/footer_script") %>
					<script src="/backEnd/assets/plugins/datatables/jquery.dataTables.min.js"></script>
					<script src="/backEnd/assets/plugins/datatables/datatables.min.js"></script>
					<script src="/backEnd/assets/js/script.js"></script>

					</head>
					</body>