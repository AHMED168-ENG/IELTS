<%- include("../include/head") %>
	<link rel="stylesheet" href="/frontEnd/assets/css/style.css">
	<link rel="stylesheet" href="/frontEnd/assets/plugins/select2/css/select2.min.css" />

	<!-- Bootstrap CSS -->
	<link rel="stylesheet" href="/frontEnd/assets/plugins/bootstrap-tagsinput/css/bootstrap-tagsinput.css" />

	<link rel="stylesheet" href="/frontEnd/assets/plugins/dropzone/dropzone.min.css" />
	<link href="/backEnd/assets/Tagging-System-Autocomplete-Amsify-Suggestags/css/amsify.suggestags.css"
		rel="stylesheet">
	<link href="/backEnd/assets/css/exam/editTest.css" rel="stylesheet">
	<!-- Main CSS -->

	<%- include("../include/aside") %>
		<%- include("../include/navePare") %>
			<%- include("../include/alert") %>
				</head>
				</body>

				<div class="main-wrapper">
					<!-- Page Wrapper -->
					<div class="page-wrapper">
						<div class="content container-fluid">
							<!-- Page Header -->
							<div class="page-header">
								<div class="row">
									<div class="col-sm-7 col-auto">
										<h3 class="page-title">Exams</h3>
										<ul class="breadcrumb">
											<li class="breadcrumb-item"><a href="/">Control Panel</a></li>
											<li class="breadcrumb-item active">Add A Test</li>
										</ul>
									</div>
								</div>
								<%- include("../include/notification") %>
							</div>
							<!-- /Page Header -->

							<div class="row">
								<div class="col-md-12">
									<form method="post" enctype="application/x-www-form-urlencoded" id="examForm">
										<!-- Tabs Section -->
										<ul class="nav nav-tabs">
											<li class="nav-item">
												<a class="nav-link active" data-toggle="tab" href="#exam-info-tab">Exam
													Data</a>
											</li>
											<li class="nav-item">
												<a class="nav-link" data-toggle="tab"
													href="#questions-tab">Questions</a>
											</li>
										</ul>

										<div class="tab-content">
											<!-- Exam Info Tab -->
											<div id="exam-info-tab" class="tab-pane active">
												<div class="card mt-3">
													<div class="card mt-3">
														<div class="card-body">
															<h4 class="card-title">Basic Information</h4>
															<div class="row form-row">
																<div class="col-md-12">
																	<div class="form-group">
																		<label>Exam Name<span
																				class="text-danger">*</span></label>
																		<input type="text" name="examName" id="examName"
																			class="form-control" required>
																		<div class="error-message text-danger"></div>
																	</div>
																</div>

																<div class="col-md-12">
																	<div class="form-group">
																		<label>نوع الامتحان <span
																				class="text-danger">*</span></label>
																		<select class="form-control" name="examType"
																			id="examType" required>
																			<option value="academic">Academic</option>
																			<option value="general training">General
																				Training</option>
																		</select>
																		<div class="error-message text-danger"></div>
																	</div>
																</div>

																<!-- Toggle Shuffle Button -->
																<div class="col-md-12">
																	<div class="form-group">
																		<label>Random Order</label>
																		<div>
																			<button type="button" id="shuffleToggle"
																				class="btn ">
																				<span id="shuffleLabel"></span>
																			</button>
																			<input type="hidden" name="shuffle"
																				id="shuffleInput" value="true">
																		</div>
																	</div>
																</div>
															</div>
														</div>
													</div>
												</div>

											</div>
											<!-- /Exam Info Tab -->

											<!-- Questions Tab -->
											<div id="questions-tab" class="tab-pane">
												<ul class="nav nav-tabs" id="sections-tabs">
													<!-- Dynamic Section Tabs Will Be Appended Here -->
												</ul>

												<div class="tab-content" id="sections-content">
													<!-- Dynamic Section Content Will Be Appended Here -->
												</div>
											</div>
										</div>

										<div class="submit-section submit-btn-bottom">
											<button type="button" id="submitExam"
												class="btn btn-primary submit-btn">Save
												Changes</button>
										</div>
									</form>
								</div>
							</div>
						</div>
					</div>
					<!-- /Page Wrapper -->
				</div>
				<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
				<script src="https://cdn.ckeditor.com/ckeditor5/39.0.1/classic/ckeditor.js"></script>
				<script>
					document.addEventListener("DOMContentLoaded", () => {
						const shuffleToggle = document.getElementById("shuffleToggle");
						const shuffleLabel = document.getElementById("shuffleLabel");
						const shuffleInput = document.getElementById("shuffleInput");

						// Initial state
						let isShuffleEnabled = true;

						shuffleToggle.addEventListener("click", () => {
							isShuffleEnabled = !isShuffleEnabled;
							shuffleInput.value = isShuffleEnabled ? "true" : "false";
							shuffleLabel.textContent = !isShuffleEnabled ? "Disabled" : "Activated";
							shuffleToggle.classList.toggle("btn-primary", isShuffleEnabled);
							shuffleToggle.classList.toggle("btn-danger", !isShuffleEnabled);
						});
					});
				</script>
				<script>

					const sections = JSON.parse('<%- JSON.stringify(sections) %>');
					const examData = JSON.parse('<%- JSON.stringify(Testing) %>');
					const sectionsTabs = document.getElementById('sections-tabs');
					const sectionsContent = document.getElementById('sections-content');
					const editors = {}; // لتخزين CKEditor الخاص بكل سؤال
					const audioFiles = {}; // لتخزين الملفات الصوتية
					const fileUploads = {}; // لتخزين الملفات المرفوعة
					let questionCounts = {};
					let blockCounts = {};

					function showNotification({ type, title, text = '', html = '', timer = 5000, position = 'top-end' }) {
						Swal.fire({
							toast: true,
							position,
							icon: type,
							title,
							text,
							html,
							showConfirmButton: false,
							timer,
						});
					}

					const populateExamInfo = () => {
						document.getElementById('examName').value = examData.name;
						document.getElementById('examType').value = examData.type;
						const shuffleInput = document.getElementById('shuffleInput');
						const shuffleToggle = document.getElementById("shuffleToggle");
						const shuffleLabel = document.getElementById("shuffleLabel");

						if (shuffleInput) {
							isShuffleEnabled = examData.shuffle;
							shuffleInput.value = isShuffleEnabled ? "true" : "false";
							shuffleLabel.textContent = !isShuffleEnabled ? "Disabled" : "Activated";
							shuffleToggle.classList.toggle("btn-primary", isShuffleEnabled);
							shuffleToggle.classList.toggle("btn-danger", !isShuffleEnabled);
						}
					};

					const attachEventListeners = (blockIndex2) => {
						document.querySelectorAll('.remove-question-btn').forEach((btn) => {
							btn.addEventListener('click', (e) => {
								e.target.closest('.question-block').remove();
							});
						});
						document.querySelectorAll('.question-type').forEach(select => {
							select.addEventListener('change', (e) => {

								const type = e.target.value;
								const sectionId = e.target.dataset.sectionId;
								const index = e.target.dataset.index;
								const questionIndex = questionCounts[sectionId][blockIndex2];
								const additionalFields = document.querySelector(`.additional-fields[data-section-id="${sectionId}"][data-block-index="${blockIndex2}"][data-index="${index}"]`);

								if (additionalFields) {
									additionalFields.innerHTML = '';
									if (type === 'multipleChoice') {
										additionalFields.innerHTML = `
										<div class="form-group">
											<label>Options <span class="text-danger">*</span></label>
											<div id="choices-container-${sectionId}-${index}">
												<div class="choice-wrapper d-flex align-items-center mb-2">
													<span class="choice-number mr-2">1.</span>
													<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][choices][]" class="form-control" placeholder="First Option" required>
												</div>
												<div class="choice-wrapper d-flex align-items-center mb-2">
													<span class="choice-number mr-2">2.</span>
													<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][choices][]" class="form-control" placeholder="Second Option" required>
												</div>
											</div>
											<button type="button" class="btn btn-success btn-sm add-choice-btn" data-section-id="${sectionId}" data-index="${index}">Add Option</button>
										</div>
										<div class="form-group">
											<label>Correct Answer <span class="text-danger">*</span></label>
											<select name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required></select>
										</div>
									`;
										attachEventListeners(blockIndex2);
										attachChoiceEvent(blockIndex2)
									} else if (type === 'trueFalse') {
										additionalFields.innerHTML = `
										<div class="form-group">
											<label>Correct Answer <span class="text-danger">*</span></label>
											<select name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
												<option value="true">True</option>
												<option value="false">False</option>
											</select>
										</div>
									`;
									} else if (type === 'fillInTheBlank') {
										additionalFields.innerHTML = `
										<div class="form-group">
											<label>Answer <span class="text-danger">*</span></label>
											<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
										</div>
									`;
									} else if (type === 'audio') {
										additionalFields.innerHTML = `
										<div class="form-group">
											<label>Audio Recording<span class="text-danger">*</span></label>
											<div class="audio-controls">
												<button type="button" class="btn btn-primary record-audio-btn" data-section-id="${sectionId}" data-index="${index}"><i class="fa fa-microphone"></i> تسجيل</button>
												<span class="recording-indicator text-danger d-none">Registering...</span>
												<audio controls class="mt-2 d-none"></audio>
											</div>
										</div>
										<div class="form-group">
											<label>The Right Answer <span class="text-danger">*</span></label>
											<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
										</div>
									`;
										attachAudioListeners(sectionId, blockIndex2, index);
									} else if (type === 'file') {
										additionalFields.innerHTML = `
										<div class="form-group">
											<label>Upload File <span class="text-danger">*</span></label>
											<input type="file" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][file]" class="form-control file-upload" data-section-id="${sectionId}" data-index="${index}" required>
										</div>
										<div class="form-group">
											<label>The Right Answer <span class="text-danger">*</span></label>
											<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
										</div>
									`;
										attachFileListeners(sectionId, blockIndex2, index);
									}
								}
							});
						});
					};
					document.querySelectorAll('.remove-question-btn').forEach(button => {
						button.addEventListener('click', (e) => {
							e.target.closest('.question-block').remove();
						});
					});
					document.querySelectorAll('.remove-block-btn').forEach(button => {
						button.addEventListener('click', (e) => {
							e.target.closest('.block-card').remove();
						});
					});
					const attachChoiceEvent = (blockIndex2) => {
						const updateCorrectAnswerOptions = (sectionId, index) => {
							const correctAnswerSelect = document.querySelector(`select[name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]"]`);
							console.log(`choices-container-${sectionId}-${index}`)
							const choicesContainer = document.getElementById(`choices-container-${sectionId}-${index}`);
							const choices = choicesContainer.querySelectorAll('input[type="text"]');
							correctAnswerSelect.innerHTML = ''; // Clear old options

							choices.forEach((choice, i) => {
								const option = document.createElement('option');
								option.value = choice.value;
								option.textContent = `${i + 1}. ${choice.value}`;
								correctAnswerSelect.appendChild(option);
							});
						};


						document.querySelectorAll('.add-choice-btn').forEach(button => {
							button.addEventListener('click', (e) => {
								const sectionId = e.target.getAttribute('data-section-id');
								const index = e.target.getAttribute('data-index');
								const choicesContainer = document.getElementById(`choices-container-${sectionId}-${index}`);
								console.log(`choices-container-${sectionId}-${index}`)
								const choiceTemplate = `
									<div class="choice-wrapper d-flex align-items-center mb-2">
										<span class="choice-number mr-2">${choicesContainer.children.length + 1}.</span>
										<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][choices][]" class="form-control" required>
										<button type="button" class="btn btn-danger btn-sm ml-2 remove-choice-btn">X</button>
									</div>
								`;
								choicesContainer.insertAdjacentHTML('beforeend', choiceTemplate);

								attachEventListeners();


								choicesContainer.addEventListener('input', (e) => {
									if (e.target.tagName === 'INPUT') {
										updateCorrectAnswerOptions(sectionId, index);
									}
								});

								choicesContainer.addEventListener('click', (e) => {
									if (e.target.classList.contains('remove-choice-btn')) {
										const choiceWrapper = e.target.closest('.choice-wrapper');
										choiceWrapper.remove();

										// Update choice numbers
										const allChoices = choicesContainer.querySelectorAll('.choice-wrapper');
										allChoices.forEach((choice, i) => {
											choice.querySelector('.choice-number').textContent = `${i + 1}.`;
										});

										updateCorrectAnswerOptions(sectionId, index);
									}
								});
								updateCorrectAnswerOptions(sectionId, index);
							});
						}, { once: true });
					}

					const populateQuestionFields = (sectionId, index, question = null, blockIndex2) => {

						const additionalFields = document.querySelector(`.additional-fields[data-section-id="${sectionId}"][data-block-index="${blockIndex2}"][data-index="${index}"]`);


						if (question?.type === 'multipleChoice') {
							additionalFields.innerHTML = `
								<div class="form-group">
									<label>Options <span class="text-danger">*</span></label>
									<div id="choices-container-${sectionId}-${index}">
										${question?.choices.map((choice, i) => `
											<div class="choice-wrapper d-flex align-items-center mb-2">
												<span class="choice-number mr-2">${i + 1}.</span>
												<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][choices][]" class="form-control" value="${choice}" required>
											</div>
										`).join('')}
									</div>
									<button type="button" class="btn btn-success btn-sm add-choice-btn" data-section-id="${sectionId}" data-index="${index}">Add Option</button>
								</div>
								<div class="form-group">
									<label>Correct Answer <span class="text-danger">*</span></label>
									<select name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
										${question?.choices.map(choice => `<option value="${choice}" ${question?.correctAnswer === choice ? 'selected' : ''}>${choice}</option>`).join('')}
									</select>
								</div>
							`;
						} else if (question?.type === 'trueFalse') {
							additionalFields.innerHTML = `
								<div class="form-group">
									<label>Correct Answer <span class="text-danger">*</span></label>
									<select name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" required>
										<option value="true" ${question?.correctAnswer === 'true' ? 'selected' : ''}>True</option>
										<option value="false" ${question?.correctAnswer === 'false' ? 'selected' : ''}>false</option>
									</select>
								</div>
							`;
						} else if (question?.type === 'fillInTheBlank') {
							additionalFields.innerHTML = `
								<div class="form-group">
									<label>Answer <span class="text-danger">*</span></label>
									<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" value="${question?.correctAnswer}" required>
								</div>
							`;
						} else if (question?.type === 'audio') {
							additionalFields.innerHTML = `
								<div class="form-group">
									<label>Audio Recording <span class="text-danger">*</span></label>
									<div class="audio-controls">
										<audio controls src="http://localhost:5000/backEnd/assets/sound/question/${question?.file}"></audio>
										<input type="hidden" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][file]" class="form-control file-upload" value="${question?.file}" required>
										<span class="recording-indicator text-danger d-none">Registering...</span>
									</div>
								</div>
								<div class="form-group">
									<label>Answer <span class="text-danger">*</span></label>
									<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" value="${question?.correctAnswer}" required>
								</div>
							`;
						} else if (question?.type === 'file') {
							additionalFields.innerHTML = `
								<div class="form-group">
									<label>Upload File <span class="text-danger">*</span></label>
									<input type="hidden" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][file]" class="form-control file-upload" value="${question?.file}" required>
									<audio controls src="http://localhost:5000/backEnd/assets/sound/question/${question?.file}"></audio>
									<a href="http://localhost:5000/backEnd/assets/sound/question/${question?.file}" target="_blank">View File</a>
								</div>
								<div class="form-group">
									<label>Answer <span class="text-danger">*</span></label>
									<input type="text" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][correctAnswer]" class="form-control" value="${question?.correctAnswer}" required>
								</div>

							`;
						}

						console.log("tow")
					};

					const addQuestion = (sectionId, question, blockId) => {
						const blockIndex2 = blockId;
						questionCounts[sectionId][blockIndex2]++;
						const questionIndex = questionCounts[sectionId][blockIndex2];
						if (questionIndex) {
							const questionsContainer = document.getElementById(`questions-container-${sectionId}-${blockIndex2}`);
							const questionTemplate = `
					            <div class="question question-block card mt-3">
									<div class="card-body">
										<h6 class="question-title question_text">Question ${questionIndex}</h6>
										<div class="form-group">
											<label>Question Text</label>
											<textarea name="sections[${sectionId}][blocks][${blockIndex2}][questions][${questionIndex}][text]" id="question-text-${sectionId}-${blockIndex2}-${questionIndex}" class="form-control">${question ? question.questionText : ''}</textarea>
										</div>
										<div class="form-group">
											<label>Question Degree</label>
											<input type="number" value="${question ? question.degree : ''}" name="sections[${sectionId}][blocks][${blockIndex2}][questions][${questionIndex}][degree]" class="form-control" />
										</div>
										<div class="form-group">
											<label>Question Type</label>
											<select name="sections[${sectionId}][blocks][${blockIndex2}][questions][${questionIndex}][type]" class="form-control question-type" data-index="${questionIndex}" data-section-id="${sectionId}">
												<option value=""></option>
												<option value="multipleChoice" ${question?.type === 'multipleChoice' ? 'selected' : ''}>Multiple Choice</option>
												<option value="trueFalse" ${question?.type === 'trueFalse' ? 'selected' : ''}>true or false</option>
												<option value="fillInTheBlank" ${question?.type === 'fillInTheBlank' ? 'selected' : ''}>Fill in the blank </option>
												<option value="audio" ${question?.type === 'audio' ? 'selected' : ''}>voice </option>
												<option value="file" ${question?.type === 'file' ? 'selected' : ''}>file </option>
											</select>
										</div>
										<div class="additional-fields" data-section-id="${sectionId}" data-block-index="${blockIndex2}" data-index="${questionIndex}"></div>
										<button type="button" class="btn btn-danger remove-question-btn">Delete Question</button>
									</div>
								</div>
					        `;
							questionsContainer.insertAdjacentHTML('beforeend', questionTemplate);

							// Initialize CKEditor for question text
							ClassicEditor.create(document.querySelector(`#question-text-${sectionId}-${blockIndex2}-${questionIndex}`))
								.then(editor => {
									editors[`question-text-${sectionId}-${blockIndex2}-${questionIndex}`] = editor;
								})
								.catch(error => {
									console.error(error);
								});
							populateQuestionFields(sectionId, questionIndex, question, blockIndex2);
							attachEventListeners(blockIndex2);

						}
					};

					const addBlock = (sectionId, description) => {
						blockCounts[sectionId]++;
						const blockIndex = blockCounts[sectionId];
						questionCounts[sectionId][blockIndex] = 0;
						const blocksContainer = document.getElementById(`blocks-container-${sectionId}`);
						const addBlockButton = blocksContainer.previousElementSibling; // تحديد زر "Add Question Block"

						const blockTemplate = `
					           <div class="block block-card card mt-3">
									<div class="card-header bg-primary text-white">
										<h5>Block ${blockIndex}</h5>
									</div>
									<div class="card-body">
										<div class="form-group">
											<label>Description</label>
											<textarea name="sections[${sectionId}][blocks][${blockIndex}][description]" id="block-description-${sectionId}-${blockIndex}" class="form-control">${description ? description : ''}</textarea>
										</div>
										<div id="questions-container-${sectionId}-${blockIndex}" class="questions-container mt-3">
											<!-- Questions for this block will be added here -->
										</div>
										<button type="button" class="btn w-100 btn-primary add-question-btn mt-2" data-section-id="${sectionId}" data-block-index="${blockIndex}">Add Question</button>
										<button type="button" class="btn w-100 btn-danger remove-block-btn mt-2" data-section-id="${sectionId}" data-block-index="${blockIndex}">Delete Block</button>
									</div>
								</div>
								
								
					        `;
						blocksContainer.insertAdjacentHTML('beforeend', blockTemplate);

						// Initialize CKEditor for description
						ClassicEditor.create(document.querySelector(`#block-description-${sectionId}-${blockIndex}`))
							.then(editor => {
								editors[`block-description-${sectionId}-${blockIndex}`] = editor;
							})
							.catch(error => {
								console.error(error);
							});
						document.querySelectorAll('.remove-block-btn').forEach(button => {
							button.addEventListener('click', (e) => {
								e.target.closest('.block-card').remove();
							});
						});
					};

					document.addEventListener('click', (event) => {
						if (event.target.classList.contains('add-block-btn')) {
							const sectionId = event.target.getAttribute('data-section-id');
							addBlock(sectionId);
						} else if (event.target.classList.contains('add-question-btn')) {
							const sectionId = event.target.getAttribute('data-section-id');
							const blockId = event.target.getAttribute('data-block-index');
							addQuestion(sectionId, null, blockId);
						}
					});
					const createSectionsTabs = () => {
						examData.sections.forEach((section, index) => {
							blockCounts[section._id] = 0;
							questionCounts[section._id] = {};
							const tab = document.createElement('li');
							tab.className = 'nav-item';
							tab.innerHTML = `
								<a class="nav-link ${index === 0 ? 'active' : ''}" data-toggle="tab" href="#section-${section._id}">
									${section.section || 'Unnamed Section'}
								</a>`;
							sectionsTabs.appendChild(tab);

							// إنشاء محتوى للسكشن
							const content = document.createElement('div');
							content.className = `tab-pane ${index === 0 ? 'active' : ''}`;
							content.id = `section-${section._id}`;
							content.innerHTML = `
								<div>
					                <div id="blocks-container-${section._id}" class="blocks-container mt-4">
					                    <!-- Blocks will be dynamically added here -->
					                </div>
									 <button type="button" class="btn btn-success add-block-btn"  data-section-id="${section._id}">Add Question Block</button>
					            </div>
`;
							sectionsContent.appendChild(content);

							// تهيئة عداد الأسئلة
							// إضافة الأسئلة الموجودة إلى السكشن

							const blocks = examData.sections.find(q => q._id === section._id).blocks;
							blocks.forEach((block, index) => {
								addBlock(section._id, block.description)
								block.questions.forEach(question => {
									addQuestion(section._id, question, index + 1);
								});
							});
						});
					};


					const attachAudioListeners = (sectionId, blockIndex2, index) => {
						const recordBtn = document.querySelector(`.record-audio-btn[data-section-id="${sectionId}"][data-index="${index}"]`);
						const parent = recordBtn.closest('.audio-controls');
						const audioElement = parent.querySelector('audio');
						const recordingIndicator = parent.querySelector('.recording-indicator');
						let mediaRecorder;
						let isRecording = false;
						let chunks = [];
						recordBtn.addEventListener('click', async () => {
							if (!isRecording) {
								const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
								mediaRecorder = new MediaRecorder(stream);

								mediaRecorder.ondataavailable = (e) => {
									chunks.push(e.data);
								};

								mediaRecorder.onstop = async () => {
									const blob = new Blob(chunks, { type: 'audio/ogg; codecs=opus' });
									audioElement.src = URL.createObjectURL(blob);
									audioElement.classList.remove('d-none');
									chunks = [];

									const formData = new FormData();
									formData.append('file', blob);

									try {
										const response = await fetch('http://localhost:5000/dashboard/upload-test-file', {
											method: 'POST',
											body: formData
										});

										if (!response.ok) {
											throw new Error('Failed to upload file');
										}

										const data = await response.json();
										audioFiles[`sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][file]`] = data.fileName;
										recordingIndicator.classList.add('d-none');
										recordBtn.innerHTML = '<i class="fa fa-microphone"></i> Registration';
									} catch (error) {
										console.error('Upload failed:', error);
									}

									recordingIndicator.classList.add('d-none');
									recordBtn.innerHTML = '<i class="fa fa-microphone"></i> Registration';
								};

								mediaRecorder.start();
								isRecording = true;
								recordingIndicator.classList.remove('d-none');
								recordBtn.innerHTML = '<i class="fa fa-stop"></i> Stop';
							} else {
								mediaRecorder.stop();
								isRecording = false;
							}
						});
					};

					const attachFileListeners = (sectionId, blockIndex2, index) => {
						const fileInput = document.querySelector(`.file-upload[data-section-id="${sectionId}"][data-index="${index}"]`);

						fileInput.addEventListener('change', async (event) => {
							const file = event.target.files[0];
							const allowedTypes = ['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp3'];

							if (file && file.size <= 4 * 1024 * 1024 && allowedTypes.includes(file.type)) {
								const formData = new FormData();
								formData.append('file', file);

								try {
									const response = await fetch('http://localhost:5000/dashboard/upload-test-file', {
										method: 'POST',
										body: formData
									});

									if (!response.ok) {
										throw new Error('Failed to upload file');
									}

									const data = await response.json();
									fileUploads[`sections[${sectionId}][blocks][${blockIndex2}][questions][${index}][file]`] = data.fileName;
									alert('File uploaded successfully!');
								} catch (error) {
									console.error('Upload failed:', error);
									alert('An error occurred while uploading the file. Try again.');
								}
							} else {
								if (!allowedTypes.includes(file.type)) {
									alert('The specified file is not a valid audio file.');
								} else if (file.size > 4 * 1024 * 1024) {
									alert('The file exceeds the allowed size (4 MB).');
								}
							}
						});
					};

					const submitButton = document.getElementById('submitExam');
					submitButton.addEventListener('click', async () => {
						const form = document.getElementById('examForm');
						const formData = new FormData(form);

						// Transform FormData into a structured JSON object
						const payload = {};

						// Update question text using CKEditor
						Object.keys(editors).forEach(editorId => {
							const editorContent = editors[editorId].getData();
							const textarea = document.querySelector(`#${editorId}`);
							if (textarea) formData.set(textarea?.name, editorContent);
						});

						// Add audio files to FormData
						Object.keys(audioFiles).forEach(key => {
							formData.set(key, audioFiles[key]);
						});

						// Add file uploads to FormData
						Object.keys(fileUploads).forEach(key => {
							formData.set(key, fileUploads[key]);
						});

						// Convert FormData to JSON
						formData.forEach((value, key) => {
							if (key.startsWith("sections")) {
								const keys = key.split(/\[|\]/).filter(k => k); // تقسيم المفتاح
								let current = payload;

								keys.forEach((k, i) => {
									if (!current[k]) {
										current[k] = isNaN(keys[i + 1]) ? {} : [];
									}

									if (i === keys.length - 1) {
										// معالجة الحقول التي تحتوي على [] مثل choices[]
										if (k === "choices") {
											if (!Array.isArray(current[k])) {
												current[k] = [];
											}
											current[k].push(value);
										} else {
											current[k] = value;
										}
									}

									current = current[k];
								});
							} else if (key === "examName") {
								payload.examName = value; // إضافة اسم الامتحان
							} else if (key === "examType") {
								payload.examType = value; // إضافة نوع الامتحان
							} else if (key === "shuffle") {
								payload.shuffle = value === "true"; // إضافة خاصية التبديل العشوائي
							}
						});

						// Function to clean payload
						const cleanPayload = (obj) => {
							if (Array.isArray(obj)) {
								return obj.filter(item => item !== null && item !== undefined).map(cleanPayload);
							} else if (typeof obj === 'object' && obj !== null) {
								const newObj = {};
								Object.keys(obj).forEach(key => {
									const value = cleanPayload(obj[key]);
									if (value !== null && value !== undefined) {
										newObj[key] = value;
									}
								});
								return newObj;
							}
							return obj;
						};

						// Clean the payload
						const cleanedPayload = cleanPayload(payload);

						// Ensure choices is always an array
						const ensureChoicesArray = (data) => {
							if (Array.isArray(data)) {
								return data.map(item => ensureChoicesArray(item));
							} else if (typeof data === 'object' && data !== null) {
								Object.keys(data).forEach(key => {
									if (key === 'choices' && typeof data[key] !== 'object') {
										data[key] = Array.isArray(data[key]) ? data[key] : [];
									} else {
										data[key] = ensureChoicesArray(data[key]);
									}
								});
								return data;
							}
							return data;
						};

						const finalPayload = ensureChoicesArray(cleanedPayload);
						console.log(examData)
						try {
							const response = await fetch(`http://localhost:5000/dashboard/EditTesting/${examData.examId}`, {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify(finalPayload),
							});

							if (!response.ok) {
								const errorData = await response.json();

								if (errorData.errors && errorData.errors.length > 0) {
									Swal.fire({
										title: 'Validation error',
										html: errorData.errors.map(err => `<p>${err}</p>`).join(''),
										icon: 'error',
										confirmButtonText: 'Good',
									});
								} else {
									Swal.fire({
										title: 'Unexpected error',
										text: 'An unexpected error occurred. Try again.',
										icon: 'error',
										confirmButtonText: 'Good',
									});
								}
							} else {
								Swal.fire({
									title: 'Saved successfully',
									text: 'The operation was successful!',
									icon: 'success',
									confirmButtonText: 'Good',
								}).then(() => window.location.reload());
							}
						} catch (error) {
							console.error('Network error:', error);
							Swal.fire({
								title: 'Network error',
								text: 'An error occurred while connecting to the server. Please make sure you are connected to the network.',
								icon: 'error',
								confirmButtonText: 'Good',
							});
						}
					});

					createSectionsTabs();
					populateExamInfo();
					attachEventListeners();
					// attachChoiceEvent()


				</script>

				<%- include("../include/footer_script") %>
					<script src="/backEnd/assets/plugins/datatables/jquery.dataTables.min.js"></script>
					<script src="/backEnd/assets/plugins/datatables/datatables.min.js"></script>
					<script src="/backEnd/assets/js/script.js"></script>

					</head>
					</body>